@page "/night-mode"
@implements IDisposable

<h3>Night Mode</h3>

<div class="night-mode-page">
    <div class="status-section">
        <div class="status-card @(isInNightSchedule ? "active" : "inactive")">
            <div class="status-header">
                <span class="status-icon">@(isInNightSchedule ? "üåô" : "‚òÄÔ∏è")</span>
                <h2>@(isInNightSchedule ? "Night Mode Active" : "Day Mode Active")</h2>
            </div>
            <div class="status-info">
                <p><strong>Current State:</strong> <span class="state-badge state-@currentState.ToString().ToLower()">@currentState</span></p>
                <p><strong>Schedule:</strong> @settings?.NightMode.StartTime - @settings?.NightMode.EndTime</p>
                <p><strong>Enabled:</strong> @(settings?.NightMode.Enabled == true ? "Yes" : "No")</p>
            </div>
        </div>
    </div>

    <div class="preview-section">
        <h2>Camera Preview</h2>
        <div class="camera-preview">
            @if (currentState == FamilyWall.Core.Models.ScreenState.NightLive)
            {
                <div class="live-indicator">
                    <span class="live-dot"></span> LIVE
                </div>
            }
            <div class="preview-placeholder">
                <div class="preview-icon">üì∑</div>
                <p>Camera preview will appear here when Night Mode is active with motion detection.</p>
                @if (currentState == FamilyWall.Core.Models.ScreenState.NightLive)
                {
                    <p class="mock-message"><em>Mock: Camera feed would show live motion here</em></p>
                }
                else
                {
                    <p class="hint-message">Motion detection is currently @(isInNightSchedule ? "monitoring" : "inactive (Day Mode)")</p>
                }
            </div>
        </div>
    </div>

    <div class="settings-section">
        <h2>Motion Detection Settings</h2>
        <div class="settings-grid">
            <div class="setting-item">
                <label>Motion Threshold</label>
                <div class="setting-value">
                    <span class="value-display">@settings?.NightMode.MotionThreshold</span>
                    <span class="value-unit">(0-255)</span>
                </div>
                <p class="setting-description">Sensitivity for motion detection. Lower = more sensitive.</p>
            </div>

            <div class="setting-item">
                <label>Inactivity Timeout</label>
                <div class="setting-value">
                    <span class="value-display">@settings?.NightMode.InactivityTimeoutSeconds</span>
                    <span class="value-unit">seconds</span>
                </div>
                <p class="setting-description">Time before screen returns to Off after last motion.</p>
            </div>

            <div class="setting-item">
                <label>Recording Consent</label>
                <div class="setting-value">
                    <span class="value-display consent-@(settings?.Privacy.RecordingConsent == true ? "yes" : "no")">
                        @(settings?.Privacy.RecordingConsent == true ? "Granted" : "Not Granted")
                    </span>
                </div>
                <p class="setting-description">Whether motion clips can be recorded (DPAPI-encrypted, @settings?.Privacy.RetentionDays day retention).</p>
            </div>

            <div class="setting-item">
                <label>Night Mode Recording</label>
                <div class="setting-value">
                    <span class="value-display">@(settings?.Privacy.NightModeRecordingEnabled == true ? "Enabled" : "Disabled")</span>
                </div>
                <p class="setting-description">Allow recording during Night Mode (requires consent).</p>
            </div>
        </div>

        <div class="edit-hint">
            <p>üí° To modify these settings, edit appsettings.user.json in the app data directory.</p>
        </div>
    </div>

    <div class="motion-log-section">
        <h2>Recent Motion Events</h2>
        @if (recentMotionEvents.Any())
        {
            <div class="motion-log">
                @foreach (var evt in recentMotionEvents.Take(10))
                {
                    <div class="motion-event">
                        <span class="event-time">@evt.DetectedAt.ToLocalTime().ToString("HH:mm:ss")</span>
                        <span class="event-source">@evt.Source</span>
                        <span class="event-confidence">@($"{evt.Confidence:P0}")</span>
                        <span class="event-details">@evt.Details</span>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="placeholder-text">No motion events detected yet. Events will appear here when motion is detected.</p>
        }
    </div>

    <div class="info-section">
        <h2>How Night Mode Works</h2>
        <div class="info-cards">
            <div class="info-card">
                <div class="info-icon">üé•</div>
                <h3>Motion Detection</h3>
                <p>During Night Mode schedule, the camera monitors for motion using OpenCV frame differencing at ~10-15 fps.</p>
            </div>
            <div class="info-card">
                <div class="info-icon">üî¥</div>
                <h3>LIVE Indicator</h3>
                <p>When motion is detected, the screen wakes and shows a clear LIVE indicator to maintain transparency.</p>
            </div>
            <div class="info-card">
                <div class="info-icon">‚è±Ô∏è</div>
                <h3>Auto Sleep</h3>
                <p>After @settings?.NightMode.InactivityTimeoutSeconds seconds without motion, the screen returns to off to save power.</p>
            </div>
            <div class="info-card">
                <div class="info-icon">üîí</div>
                <h3>Privacy First</h3>
                <p>No cloud upload. Optional local clips are DPAPI-encrypted with @settings?.Privacy.RetentionDays-day retention.</p>
            </div>
        </div>
    </div>
</div>

<style>
    .night-mode-page {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .status-section {
        margin-bottom: 2rem;
    }

    .status-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .status-card.active {
        border: 3px solid #4a5568;
        background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
        color: white;
    }

    .status-card.inactive {
        border: 3px solid #f59e0b;
    }

    .status-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .status-icon {
        font-size: 3em;
    }

    .status-header h2 {
        margin: 0;
    }

    .status-card.active .status-header h2 {
        color: white;
    }

    .status-info p {
        margin: 0.5rem 0;
        font-size: 1.1em;
    }

    .preview-section {
        margin-bottom: 2rem;
    }

    .camera-preview {
        position: relative;
        background: #000;
        border-radius: 12px;
        overflow: hidden;
        aspect-ratio: 16 / 9;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .live-indicator {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(220, 38, 38, 0.9);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-weight: 700;
        font-size: 1.2em;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        z-index: 10;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }

    .live-dot {
        width: 12px;
        height: 12px;
        background: white;
        border-radius: 50%;
        animation: pulse 1.5s ease-in-out infinite;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.3; }
    }

    .preview-placeholder {
        text-align: center;
        color: #999;
        padding: 3rem;
    }

    .preview-icon {
        font-size: 6em;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .preview-placeholder p {
        margin: 1rem 0;
    }

    .mock-message {
        color: #fbbf24;
        font-size: 0.95em;
    }

    .hint-message {
        color: #9ca3af;
        font-size: 0.9em;
    }

    .settings-section {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .settings-section h2 {
        margin-top: 0;
        border-bottom: 2px solid #512BD4;
        padding-bottom: 0.5rem;
    }

    .settings-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
        margin: 1.5rem 0;
    }

    .setting-item label {
        font-weight: 600;
        display: block;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .setting-value {
        display: flex;
        align-items: baseline;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .value-display {
        font-size: 2em;
        font-weight: 700;
        color: #512BD4;
    }

    .value-unit {
        color: #666;
        font-size: 0.9em;
    }

    .consent-yes {
        color: #10b981;
    }

    .consent-no {
        color: #6b7280;
    }

    .setting-description {
        margin: 0;
        color: #666;
        font-size: 0.9em;
        line-height: 1.4;
    }

    .edit-hint {
        margin-top: 1.5rem;
        padding: 1rem;
        background: #fef3c7;
        border-radius: 8px;
        text-align: center;
    }

    .edit-hint p {
        margin: 0;
        color: #92400e;
    }

    .motion-log-section {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .motion-log-section h2 {
        margin-top: 0;
        border-bottom: 2px solid #512BD4;
        padding-bottom: 0.5rem;
    }

    .motion-log {
        margin-top: 1rem;
    }

    .motion-event {
        display: grid;
        grid-template-columns: 100px 100px 80px 1fr;
        gap: 1rem;
        padding: 0.75rem;
        border-bottom: 1px solid #e5e7eb;
        align-items: center;
    }

    .motion-event:last-child {
        border-bottom: none;
    }

    .event-time {
        font-weight: 600;
        color: #512BD4;
    }

    .event-source {
        color: #666;
    }

    .event-confidence {
        color: #10b981;
        font-weight: 600;
    }

    .event-details {
        color: #333;
    }

    .placeholder-text {
        color: #999;
        text-align: center;
        padding: 2rem;
    }

    .info-section {
        margin-bottom: 2rem;
    }

    .info-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .info-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }

    .info-icon {
        font-size: 3em;
        margin-bottom: 1rem;
    }

    .info-card h3 {
        margin: 0.5rem 0;
        color: #333;
    }

    .info-card p {
        margin: 0.5rem 0 0 0;
        color: #666;
        font-size: 0.95em;
        line-height: 1.5;
    }

    .state-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 4px;
        font-weight: 600;
        font-size: 0.9em;
    }

    .state-interactive {
        background-color: #28a745;
        color: white;
    }

    .state-off {
        background-color: #6c757d;
        color: white;
    }

    .state-nightlive {
        background-color: #fd7e14;
        color: white;
    }

    .state-ambient {
        background-color: #17a2b8;
        color: white;
    }
</style>

@code {
    private FamilyWall.Core.Settings.AppSettings? settings;
    private FamilyWall.Core.Models.ScreenState currentState;
    private bool isInNightSchedule;
    private List<FamilyWall.Core.Models.PresenceEvent> recentMotionEvents = new();

    [Inject] private Microsoft.Extensions.Options.IOptions<FamilyWall.Core.Settings.AppSettings>? Options { get; set; }
    [Inject] private FamilyWall.Core.Abstractions.IScreenStateService? ScreenStateService { get; set; }
    [Inject] private FamilyWall.Core.Abstractions.IPresenceDetector? PresenceDetector { get; set; }

    protected override void OnInitialized()
    {
        settings = Options?.Value;

        if (ScreenStateService != null)
        {
            currentState = ScreenStateService.CurrentState;
            isInNightSchedule = ScreenStateService.IsNightModeSchedule();
            ScreenStateService.StateChanged += OnStateChanged;
        }

        if (PresenceDetector != null)
        {
            PresenceDetector.PresenceDetected += OnPresenceDetected;
        }

        // Update schedule check periodically
        var timer = new System.Threading.Timer(_ =>
        {
            if (ScreenStateService != null)
            {
                isInNightSchedule = ScreenStateService.IsNightModeSchedule();
                InvokeAsync(StateHasChanged);
            }
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private void OnStateChanged(object? sender, FamilyWall.Core.Abstractions.ScreenStateChangedEventArgs e)
    {
        currentState = e.NewState;
        InvokeAsync(StateHasChanged);
    }

    private void OnPresenceDetected(object? sender, FamilyWall.Core.Models.PresenceEvent e)
    {
        recentMotionEvents.Insert(0, e);
        // Keep only last 50 events
        if (recentMotionEvents.Count > 50)
        {
            recentMotionEvents.RemoveAt(recentMotionEvents.Count - 1);
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (ScreenStateService != null)
        {
            ScreenStateService.StateChanged -= OnStateChanged;
        }
        if (PresenceDetector != null)
        {
            PresenceDetector.PresenceDetected -= OnPresenceDetected;
        }
    }
}
