@page "/calendar"
@using Microsoft.EntityFrameworkCore

<h3>Calendar</h3>

<div class="calendar-page">
    <div class="calendar-header">
        <div class="header-top">
            <h1>Upcoming Events</h1>
            @if (isAuthenticated)
            {
                <button class="btn-refresh" @onclick="RefreshCalendar" disabled="@isRefreshing">
                    @if (isRefreshing)
                    {
                        <span class="spinner">âŸ³</span>
                        <span>Refreshing...</span>
                    }
                    else
                    {
                        <span>ðŸ”„ Refresh Now</span>
                    }
                </button>
            }
        </div>
        @if (activeCalendarNames.Count > 0)
        {
            <div class="syncing-calendars">
                <span class="label">Syncing:</span>
                @foreach (var calName in activeCalendarNames)
                {
                    <span class="calendar-badge">@calName</span>
                }
            </div>
        }
        else if (isAuthenticated)
        {
            <div class="syncing-calendars">
                <span class="label">Syncing:</span>
                <span class="calendar-badge">Default Calendar</span>
            </div>
        }
        @if (!string.IsNullOrEmpty(refreshMessage))
        {
            <div class="refresh-message">@refreshMessage</div>
        }
    </div>

    <div class="events-container">
        @if (events.Any())
        {
            @foreach (var evt in events)
            {
                <div class="event-card @(evt.IsBirthday ? "birthday" : "")">
                    <div class="event-time">
                        @evt.StartUtc.ToLocalTime().ToString("MMM dd, yyyy")
                        @if (!evt.IsAllDay)
                        {
                            <span>at @evt.StartUtc.ToLocalTime().ToString("h:mm tt")</span>
                        }
                    </div>
                    <div class="event-title">@evt.Title</div>
                    @if (evt.IsBirthday)
                    {
                        <div class="birthday-icon">ðŸŽ‚</div>
                    }
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <p>No calendar events found.</p>
                @if (!isAuthenticated)
                {
                    <p class="hint">Please authenticate with Microsoft Graph in Settings to sync calendar events.</p>
                }
                else
                {
                    <p class="hint">Waiting for calendar sync... Events will appear shortly.</p>
                }
            </div>
        }
    </div>
</div>

<style>
    .calendar-page {
        padding: 2rem;
        max-width: 800px;
        margin: 0 auto;
    }

    .calendar-header {
        margin-bottom: 1.5rem;
    }

    .header-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .calendar-header h1 {
        margin: 0;
    }

    .btn-refresh {
        padding: 0.6rem 1.2rem;
        background-color: #2196F3;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 0.95em;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.1s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-refresh:hover:not(:disabled) {
            background-color: #1976D2;
            transform: translateY(-1px);
        }

        .btn-refresh:active:not(:disabled) {
            transform: translateY(0);
        }

        .btn-refresh:disabled {
            background-color: #9E9E9E;
            cursor: not-allowed;
        }

    .spinner {
        display: inline-block;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    .refresh-message {
        margin-top: 0.5rem;
        padding: 0.5rem 1rem;
        background-color: #E8F5E9;
        color: #2E7D32;
        border-radius: 4px;
        font-size: 0.9em;
    }

    .syncing-calendars {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .syncing-calendars .label {
        font-size: 0.9em;
        color: #666;
        font-weight: 600;
    }

    .calendar-badge {
        display: inline-block;
        padding: 0.35rem 0.65rem;
        background-color: #e7f3ff;
        border: 1px solid #2196F3;
        color: #0d47a1;
        border-radius: 4px;
        font-size: 0.85em;
        font-weight: 500;
    }

    .events-container {
        margin-top: 2rem;
    }
    
    .event-card {
        background: white;
        border-left: 4px solid #512BD4;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .event-card.birthday {
        border-left-color: #ff6b6b;
        background: #fff5f5;
    }
    
    .event-time {
        font-size: 0.9em;
        color: #666;
        margin-bottom: 0.5rem;
    }
    
    .event-title {
        font-weight: 600;
        font-size: 1.1em;
    }
    
    .birthday-icon {
        margin-top: 0.5rem;
        font-size: 1.5em;
    }
    
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #999;
    }
    
    .hint {
        font-size: 0.9em;
        margin-top: 0.5rem;
    }
</style>

@code {
    [Inject] private FamilyWall.Infrastructure.Data.AppDbContext DbContext { get; set; } = default!;
    [Inject] private FamilyWall.Integrations.Graph.IGraphClient GraphClient { get; set; } = default!;
    [Inject] private Microsoft.Extensions.Options.IOptions<FamilyWall.Core.Settings.AppSettings> Options { get; set; } = default!;
    [Inject] private FamilyWall.Services.CalendarSyncService? CalendarSyncService { get; set; }

    private List<FamilyWall.Core.Models.CalendarEvent> events = new();
    private bool isAuthenticated = false;
    private List<string> activeCalendarNames = new();
    private bool isRefreshing = false;
    private string refreshMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if authenticated with Microsoft Graph
        isAuthenticated = await GraphClient.IsAuthenticatedAsync();

        // Load active calendar names
        await LoadActiveCalendarNamesAsync();

        // Load events from database (cached from CalendarSyncService)
        await LoadEventsAsync();
    }

    private async Task LoadActiveCalendarNamesAsync()
    {
        if (!isAuthenticated) return;

        var settings = Options.Value;
        if (settings?.Graph?.CalendarIds?.Count > 0)
        {
            try
            {
                var calendars = await GraphClient.GetCalendarsAsync();
                activeCalendarNames = settings.Graph.CalendarIds
                    .Select(id => calendars.FirstOrDefault(c => c.Id == id)?.Name ?? id)
                    .ToList();
            }
            catch
            {
                // Silently fail - will show IDs or nothing
                activeCalendarNames = settings.Graph.CalendarIds.ToList();
            }
        }
    }

    private async Task LoadEventsAsync()
    {
        var today = DateTime.Today;
        var endDate = today.AddDays(90);

        events = await DbContext.CalendarEvents
            .Where(e => e.StartUtc >= today && e.StartUtc <= endDate)
            .OrderBy(e => e.StartUtc)
            .ToListAsync();
    }

    private async Task RefreshCalendar()
    {
        if (CalendarSyncService == null || isRefreshing) return;

        try
        {
            isRefreshing = true;
            refreshMessage = "";
            StateHasChanged();

            // Trigger immediate sync
            await CalendarSyncService.TriggerSyncAsync();

            // Wait a moment for database to update
            await Task.Delay(500);

            // Reload events from database
            await LoadEventsAsync();

            refreshMessage = "âœ“ Calendar refreshed successfully!";

            // Clear message after 3 seconds
            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                await InvokeAsync(() =>
                {
                    refreshMessage = "";
                    StateHasChanged();
                });
            });
        }
        catch (Exception ex)
        {
            refreshMessage = $"âœ— Error refreshing calendar: {ex.Message}";
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }
}
